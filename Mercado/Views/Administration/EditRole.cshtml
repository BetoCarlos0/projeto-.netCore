@model Mercado.Models.Account.EditRoleViewModel

@{
    ViewData["Title"] = "Editar Função";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container form-config-role">

    <h4>@ViewData["Title"]</h4>
    <hr />
    <div>
        <form asp-action="EditRole" class="form-role">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-field">
                <h4>Função</h4>

                <div class="form-floating">
                    <input id="floatingInput"  asp-for="RoleName" class="form-control" placeholder="RoleName" />
                    <label for="floatingInput" asp-for="RoleName" ></label>
                    <span asp-validation-for="RoleName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Atualizar</button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h4>Usuários desta função</h3>
                </div>
                <div class="card-body">
                    @if (Model.Users.Any())
                    {
                        foreach (var user in Model.Users)
                        {
                            <h5 class="card-title">@user</h5>
                        }
                    }
                    else
                    {
                        <h5 class="card-title">Nenhum Usuário</h5>
                    }
                </div>
                <div class="card-footer link">
                    <a asp-action="EditUsersInRole" asp-route-roleId="@Model.Id">Adicionar ou remover Usuários</a>
                </div>
            </div>
        </form>
    </div>

    <div>
        <a asp-action="ListRole">Votlar para Lista</a>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
